{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\nconst initialState = {\n  loginInputData: {\n    loginEmail: '',\n    loginPassword: ''\n  },\n  isUserLoggedIn: false\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    updateEmail: (state, action) => {\n      state.loginInputData.loginEmail = action.payload;\n    },\n    updatePassword: (state, action) => {\n      state.loginInputData.loginPassword = action.payload;\n    },\n    signOut: state => {\n      state.isUserLoggedIn = false;\n    },\n    logIn: state => {\n      state.isUserLoggedIn = true;\n    }\n  }\n});\nexport const {\n  updateEmail,\n  updatePassword,\n  signOut,\n  logIn\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","loginInputData","loginEmail","loginPassword","isUserLoggedIn","userSlice","name","reducers","updateEmail","state","action","payload","updatePassword","signOut","logIn","actions","reducer"],"sources":["/Users/souvlaki/Desktop/projects/frontendToDeploy/src/redux/features/users/userSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\n\ntype InputData = {\n  loginEmail?: string;\n  loginPassword?: string;\n}\n\ninterface UserState {\n    loginInputData: InputData\n    isUserLoggedIn: boolean\n}\n\n// Define the initial state using that type\nconst initialState: UserState = {\n  loginInputData: {\n    loginEmail: '',\n    loginPassword: '',\n  },\n  isUserLoggedIn: false\n}\n\nexport const userSlice = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    updateEmail : (state, action: PayloadAction<string>) => {\n      state.loginInputData.loginEmail = action.payload\n    },\n    updatePassword: (state, action: PayloadAction<string>) => {\n      state.loginInputData.loginPassword = action.payload\n    },\n    signOut: (state) => {\n      state.isUserLoggedIn = false\n    },\n    logIn: (state) => {\n      state.isUserLoggedIn = true\n    }\n  },\n})\n\nexport const { updateEmail, updatePassword, signOut, logIn} = userSlice.actions\n\nexport default userSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAa9C;AACA,MAAMC,YAAuB,GAAG;EAC9BC,cAAc,EAAE;IACdC,UAAU,EAAE,EAAE;IACdC,aAAa,EAAE;EACjB,CAAC;EACDC,cAAc,EAAE;AAClB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;EACnCO,IAAI,EAAE,MAAM;EACZ;EACAN,YAAY;EACZO,QAAQ,EAAE;IACRC,WAAW,EAAGA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACtDD,KAAK,CAACR,cAAc,CAACC,UAAU,GAAGQ,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,cAAc,EAAEA,CAACH,KAAK,EAAEC,MAA6B,KAAK;MACxDD,KAAK,CAACR,cAAc,CAACE,aAAa,GAAGO,MAAM,CAACC,OAAO;IACrD,CAAC;IACDE,OAAO,EAAGJ,KAAK,IAAK;MAClBA,KAAK,CAACL,cAAc,GAAG,KAAK;IAC9B,CAAC;IACDU,KAAK,EAAGL,KAAK,IAAK;MAChBA,KAAK,CAACL,cAAc,GAAG,IAAI;IAC7B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,WAAW;EAAEI,cAAc;EAAEC,OAAO;EAAEC;AAAK,CAAC,GAAGT,SAAS,CAACU,OAAO;AAE/E,eAAeV,SAAS,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}