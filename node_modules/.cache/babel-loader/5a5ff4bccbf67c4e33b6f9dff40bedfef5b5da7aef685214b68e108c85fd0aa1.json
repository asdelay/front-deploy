{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';// Define the initial state using that type\nconst initialState={loginInputData:{loginEmail:'',loginPassword:''},isUserLoggedIn:false};export const userSlice=createSlice({name:'user',// `createSlice` will infer the state type from the `initialState` argument\ninitialState,reducers:{updateEmail:(state,action)=>{state.loginInputData.loginEmail=action.payload;},updatePassword:(state,action)=>{state.loginInputData.loginPassword=action.payload;},signOut:state=>{state.isUserLoggedIn=false;},logIn:state=>{state.isUserLoggedIn=true;}}});export const{updateEmail,updatePassword,signOut,logIn}=userSlice.actions;export default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","loginInputData","loginEmail","loginPassword","isUserLoggedIn","userSlice","name","reducers","updateEmail","state","action","payload","updatePassword","signOut","logIn","actions","reducer"],"sources":["/Users/souvlaki/Desktop/projects/testTask/frontend/src/redux/features/users/userSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\n\ntype InputData = {\n  loginEmail?: string;\n  loginPassword?: string;\n}\n\ninterface UserState {\n    loginInputData: InputData\n    isUserLoggedIn: boolean\n}\n\n// Define the initial state using that type\nconst initialState: UserState = {\n  loginInputData: {\n    loginEmail: '',\n    loginPassword: '',\n  },\n  isUserLoggedIn: false\n}\n\nexport const userSlice = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    updateEmail : (state, action: PayloadAction<string>) => {\n      state.loginInputData.loginEmail = action.payload\n    },\n    updatePassword: (state, action: PayloadAction<string>) => {\n      state.loginInputData.loginPassword = action.payload\n    },\n    signOut: (state) => {\n      state.isUserLoggedIn = false\n    },\n    logIn: (state) => {\n      state.isUserLoggedIn = true\n    }\n  },\n})\n\nexport const { updateEmail, updatePassword, signOut, logIn} = userSlice.actions\n\nexport default userSlice.reducer"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAa9C;AACA,KAAM,CAAAC,YAAuB,CAAG,CAC9BC,cAAc,CAAE,CACdC,UAAU,CAAE,EAAE,CACdC,aAAa,CAAE,EACjB,CAAC,CACDC,cAAc,CAAE,KAClB,CAAC,CAED,MAAO,MAAM,CAAAC,SAAS,CAAGN,WAAW,CAAC,CACnCO,IAAI,CAAE,MAAM,CACZ;AACAN,YAAY,CACZO,QAAQ,CAAE,CACRC,WAAW,CAAGA,CAACC,KAAK,CAAEC,MAA6B,GAAK,CACtDD,KAAK,CAACR,cAAc,CAACC,UAAU,CAAGQ,MAAM,CAACC,OAAO,CAClD,CAAC,CACDC,cAAc,CAAEA,CAACH,KAAK,CAAEC,MAA6B,GAAK,CACxDD,KAAK,CAACR,cAAc,CAACE,aAAa,CAAGO,MAAM,CAACC,OAAO,CACrD,CAAC,CACDE,OAAO,CAAGJ,KAAK,EAAK,CAClBA,KAAK,CAACL,cAAc,CAAG,KAAK,CAC9B,CAAC,CACDU,KAAK,CAAGL,KAAK,EAAK,CAChBA,KAAK,CAACL,cAAc,CAAG,IAAI,CAC7B,CACF,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEI,WAAW,CAAEI,cAAc,CAAEC,OAAO,CAAEC,KAAK,CAAC,CAAGT,SAAS,CAACU,OAAO,CAE/E,cAAe,CAAAV,SAAS,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}