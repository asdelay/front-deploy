{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Define a type for the slice state\n\n// Define the initial state using that type\nconst initialState = {\n  loginEmail: '',\n  loginPassword: '',\n  isUserLoggedIn: false\n};\nexport const userSlice = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    updateLoginEmail: (state, action) => {\n      state.loginEmail = action.payload;\n    }\n  }\n});\nexport const {\n  updateLoginEmail\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","loginEmail","loginPassword","isUserLoggedIn","userSlice","name","reducers","updateLoginEmail","state","action","payload","actions","reducer"],"sources":["/Users/souvlaki/Desktop/projects/testTask/frontend/src/redux/features/users/userSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport type { PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../../store'\n\n// Define a type for the slice state\ninterface UserState {\n    loginEmail: string;\n    loginPassword: string;\n    isUserLoggedIn: boolean\n}\n\n// Define the initial state using that type\nconst initialState: UserState = {\n  loginEmail: '',\n  loginPassword: '',\n  isUserLoggedIn: false\n}\n\nexport const userSlice = createSlice({\n  name: 'user',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    updateLoginEmail: (state, action: PayloadAction<string>) => {\n        state.loginEmail = action.payload\n    },\n  },\n})\n\nexport const { updateLoginEmail } = userSlice.actions\n\nexport default userSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAI9C;;AAOA;AACA,MAAMC,YAAuB,GAAG;EAC9BC,UAAU,EAAE,EAAE;EACdC,aAAa,EAAE,EAAE;EACjBC,cAAc,EAAE;AAClB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACnCM,IAAI,EAAE,MAAM;EACZ;EACAL,YAAY;EACZM,QAAQ,EAAE;IACRC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACxDD,KAAK,CAACP,UAAU,GAAGQ,MAAM,CAACC,OAAO;IACrC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH;AAAiB,CAAC,GAAGH,SAAS,CAACO,OAAO;AAErD,eAAeP,SAAS,CAACQ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}