{"ast":null,"code":"var _jsxFileName = \"/Users/souvlaki/Desktop/projects/testTask/frontend/src/components/LoginInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useId, useState } from 'react';\nimport { useAppDispatch } from '../redux/hooks.ts';\nimport { updateEmail, updatePassword } from '../redux/features/users/userSlice.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoginInput = ({\n  inputType,\n  labelText\n}) => {\n  _s();\n  const dispatch = useAppDispatch();\n  const id = useId();\n  const [inputValue, setInputValue] = useState('');\n  const onInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  useEffect(() => {\n    dispatch(inputType === 'email' ? updateEmail(inputValue) : updatePassword(inputValue));\n  }, [inputType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex gap-[2px] flex-col mt-[20px]\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: id,\n      className: \"font-bold font-serif leading-[20px] text-[18px] md:text-[14px]\",\n      children: labelText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: onInputChange,\n      value: inputValue,\n      className: \"w-full rounded-[5px] py-[14px] px-[20px] h-[50px] font-sans font-normal leading-[22px] text-[18px] md:text-[14px] text-dark-blue bg-[#E0E0E0] border-none focus:outline-1 focus:outline-gold\",\n      id: id,\n      type: inputType,\n      placeholder: `${inputType.substring(0, 1).toUpperCase()}${inputType.substring(1, inputType.length)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginInput, \"X1y9NcKDvpBGYsdqFkuMD+0pyu8=\", false, function () {\n  return [useAppDispatch, useId];\n});\n_c = LoginInput;\nvar _c;\n$RefreshReg$(_c, \"LoginInput\");","map":{"version":3,"names":["React","useEffect","useId","useState","useAppDispatch","updateEmail","updatePassword","jsxDEV","_jsxDEV","LoginInput","inputType","labelText","_s","dispatch","id","inputValue","setInputValue","onInputChange","e","target","value","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","type","placeholder","substring","toUpperCase","length","_c","$RefreshReg$"],"sources":["/Users/souvlaki/Desktop/projects/testTask/frontend/src/components/LoginInput.tsx"],"sourcesContent":["import React, {FC, useEffect, useId, useState} from 'react'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks.ts'\nimport { updateEmail, updatePassword } from '../redux/features/users/userSlice.ts';\n\ninterface Props {\n    inputType: 'email' | 'password';\n    labelText: string;\n}\n\nexport const LoginInput: FC<Props> = ({inputType, labelText}) => {\n    const dispatch = useAppDispatch()\n    const id = useId()\n    const [inputValue, setInputValue] = useState('')\n\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {        \n        setInputValue(e.target.value)\n        \n    }\n    useEffect(()=> {\n        dispatch(inputType === 'email' ? updateEmail(inputValue): updatePassword(inputValue))\n    }, [inputType])\nreturn (\n    <div className=\"flex gap-[2px] flex-col mt-[20px]\">\n        <label htmlFor = {id} className='font-bold font-serif leading-[20px] text-[18px] md:text-[14px]'>{labelText}</label>\n        <input onChange={onInputChange} value={inputValue} className='w-full rounded-[5px] py-[14px] px-[20px] h-[50px] font-sans font-normal leading-[22px] text-[18px] md:text-[14px] text-dark-blue bg-[#E0E0E0] border-none focus:outline-1 focus:outline-gold' id={id} type={inputType} placeholder={`${inputType.substring(0,1).toUpperCase()}${inputType.substring(1,inputType.length)}`}/>\n    </div>\n)\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAOC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,QAAO,OAAO;AAC3D,SAAyBC,cAAc,QAAQ,mBAAmB;AAClE,SAASC,WAAW,EAAEC,cAAc,QAAQ,sCAAsC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnF,OAAO,MAAMC,UAAqB,GAAGA,CAAC;EAACC,SAAS;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAMC,QAAQ,GAAGT,cAAc,CAAC,CAAC;EACjC,MAAMU,EAAE,GAAGZ,KAAK,CAAC,CAAC;EAClB,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMc,aAAa,GAAIC,CAAsC,IAAK;IAC9DF,aAAa,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAEjC,CAAC;EACDnB,SAAS,CAAC,MAAK;IACXY,QAAQ,CAACH,SAAS,KAAK,OAAO,GAAGL,WAAW,CAACU,UAAU,CAAC,GAAET,cAAc,CAACS,UAAU,CAAC,CAAC;EACzF,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;EACnB,oBACIF,OAAA;IAAKa,SAAS,EAAC,mCAAmC;IAAAC,QAAA,gBAC9Cd,OAAA;MAAOe,OAAO,EAAIT,EAAG;MAACO,SAAS,EAAC,gEAAgE;MAAAC,QAAA,EAAEX;IAAS;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpHnB,OAAA;MAAOoB,QAAQ,EAAEX,aAAc;MAACG,KAAK,EAAEL,UAAW;MAACM,SAAS,EAAC,8LAA8L;MAACP,EAAE,EAAEA,EAAG;MAACe,IAAI,EAAEnB,SAAU;MAACoB,WAAW,EAAE,GAAGpB,SAAS,CAACqB,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGtB,SAAS,CAACqB,SAAS,CAAC,CAAC,EAACrB,SAAS,CAACuB,MAAM,CAAC;IAAG;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzX,CAAC;AAEV,CAAC;AAAAf,EAAA,CAlBYH,UAAqB;EAAA,QACbL,cAAc,EACpBF,KAAK;AAAA;AAAAgC,EAAA,GAFPzB,UAAqB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}